name: Deploy to Production

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

env:
  PHP_VERSION: '8.2'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, xml, bcmath, intl
        coverage: none
        
    - name: Install Composer dependencies
      run: |
        composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
        
    - name: Create server setup script
      run: |
        # Create server setup script for cache clearing
        cat > server-setup.sh << 'EOF'
        #!/bin/bash
        echo "üßπ Clearing AWS cache and setting up SarvCast..."
        
        # Navigate to application directory
        cd /home/sarvca/public_html/my
        
        # Clear Composer cache completely
        echo "üì¶ Clearing Composer cache..."
        composer clear-cache 2>/dev/null || true
        composer global clear-cache 2>/dev/null || true
        
        # Remove old vendor folder
        echo "üóëÔ∏è Removing old vendor folder..."
        rm -rf vendor/
        
        # Clear Laravel caches
        echo "üßπ Clearing Laravel caches..."
        php artisan config:clear 2>/dev/null || true
        php artisan route:clear 2>/dev/null || true
        php artisan view:clear 2>/dev/null || true
        php artisan cache:clear 2>/dev/null || true
        
        # Install fresh dependencies
        echo "üì¶ Installing fresh dependencies..."
        composer install --no-dev --optimize-autoloader --no-interaction
        
        # Regenerate optimized caches
        echo "‚ö° Regenerating optimized caches..."
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
        # Set proper permissions
        echo "üîê Setting file permissions..."
        chmod -R 755 storage bootstrap/cache
        chown -R www-data:www-data storage bootstrap/cache
        
        # Create storage symlink
        echo "üìÅ Creating storage symlink..."
        php artisan storage:link
        
        echo "‚úÖ Server setup complete! AWS cache cleared."
        echo "üåê Application should now work at: https://my.sarvcast.ir/public/"
        EOF
        
        chmod +x server-setup.sh
        
    - name: Create deployment package (excluding vendor)
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy files excluding vendor folder for faster upload
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.env*' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          --exclude='bootstrap/cache/*' \
          --exclude='vendor' \
          --exclude='Homestead*' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          . deployment/
          
        # Copy server setup script to deployment
        cp server-setup.sh deployment/
          
    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.sarvcast.ir
        username: my@sarvcast.ir
        password: Prof48017421@#
        local-dir: ./deployment/
        server-dir: /
        # Add FTP connection stability options
        log-level: minimal
        dry-run: false
        
    - name: Prepare Server Instructions
      run: |
        echo "üìã After FTP upload completes, you have two options:"
        echo ""
        echo "üöÄ OPTION 1: Automated Setup (Recommended)"
        echo "1. SSH into your server or use cPanel Terminal"
        echo "2. Navigate to your application directory"
        echo "3. Run: ./server-setup.sh"
        echo "   This script will automatically:"
        echo "   ‚Ä¢ Clear Composer cache"
        echo "   ‚Ä¢ Remove old vendor folder"
        echo "   ‚Ä¢ Install fresh dependencies"
        echo "   ‚Ä¢ Clear and regenerate Laravel caches"
        echo "   ‚Ä¢ Set proper permissions"
        echo ""
        echo "üîß OPTION 2: Manual Setup"
        echo "1. Navigate to your application directory"
        echo "2. Run: composer clear-cache"
        echo "3. Run: rm -rf vendor/"
        echo "4. Run: composer install --no-dev --optimize-autoloader --no-interaction"
        echo "5. Run: php artisan config:clear"
        echo "6. Run: php artisan route:clear"
        echo "7. Run: php artisan view:clear"
        echo "8. Run: php artisan cache:clear"
        echo "9. Run: php artisan config:cache"
        echo "10. Run: php artisan route:cache"
        echo "11. Run: php artisan view:cache"
        echo "12. Run: chmod -R 755 storage bootstrap/cache"
        echo "13. Run: php artisan storage:link"
        echo ""
        echo "‚úÖ The automated script (server-setup.sh) is uploaded with your files!"
          
    - name: Notify Telegram
      env:
        TELEGRAM_BOT_TOKEN: 7488407974:AAFl4Ek9IanbvlkKlRoikQAqdkDtFYbD0Gc
        TELEGRAM_CHAT_ID: -1002796302613_97
        GITHUB_ACTOR: ${{ github.actor }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d "chat_id=$TELEGRAM_CHAT_ID" \
          -d "text=üöÄ *SarvCast Deployment Successful*

        *Branch:* \`${{ github.ref_name }}\`
        *Commit:* \`${{ github.sha }}\`
        *Author:* ${{ github.actor }}

        *Changes:*
        ${{ github.event.head_commit.message }}

        *Status:* ‚úÖ Deployed to production

        *Deployment Details:*
        ‚Ä¢ Application files uploaded to FTP server
        ‚Ä¢ Vendor folder excluded for faster upload
        ‚Ä¢ AWS/Docker dependencies removed

        *Next Steps:*
        ‚Ä¢ Run \`./server-setup.sh\` on server (automated)
        ‚Ä¢ Or follow manual setup instructions
        ‚Ä¢ AWS cache will be cleared automatically

        üîó [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" \
          -d "parse_mode=Markdown" \
          -d "disable_web_page_preview=true"
          
    - name: Cleanup
      if: always()
      run: |
        rm -rf deployment/