name: Deploy to Production

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

env:
  PHP_VERSION: '8.2'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, xml, bcmath, intl
        coverage: none
        
    - name: Install Composer dependencies
      run: |
        composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
        
    - name: Create deployment package (excluding vendor)
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy files excluding vendor folder for faster upload
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.env*' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          --exclude='bootstrap/cache/*' \
          --exclude='vendor' \
          --exclude='Homestead*' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          . deployment/
          
    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.sarvcast.ir
        username: my@sarvcast.ir
        password: Prof48017421@#
        local-dir: ./deployment/
        server-dir: /
        # Add FTP connection stability options
        log-level: minimal
        dry-run: false
        
    - name: Prepare Server Instructions
      run: |
        echo "üìã After FTP upload completes, run these commands on your server:"
        echo ""
        echo "üîß Essential Server Setup Commands:"
        echo "1. Navigate to your application directory"
        echo "2. Run: composer install --no-dev --optimize-autoloader --no-interaction"
        echo "3. Run: php artisan config:clear"
        echo "4. Run: php artisan route:clear"
        echo "5. Run: php artisan view:clear"
        echo "6. Run: php artisan cache:clear"
        echo "7. Run: php artisan config:cache"
        echo "8. Run: php artisan route:cache"
        echo "9. Run: php artisan view:cache"
        echo ""
        echo "üîê Set Proper Permissions:"
        echo "chmod -R 755 storage bootstrap/cache"
        echo "chown -R www-data:www-data storage bootstrap/cache"
        echo ""
        echo "üìÅ Create Storage Symlink (if needed):"
        echo "php artisan storage:link"
        echo ""
        echo "‚úÖ This will ensure your application works properly on the server."
          
    - name: Notify Telegram
      env:
        TELEGRAM_BOT_TOKEN: 7488407974:AAFl4Ek9IanbvlkKlRoikQAqdkDtFYbD0Gc
        TELEGRAM_CHAT_ID: -1002796302613_97
        GITHUB_ACTOR: ${{ github.actor }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d "chat_id=$TELEGRAM_CHAT_ID" \
          -d "text=üöÄ *SarvCast Deployment Successful*

        *Branch:* \`${{ github.ref_name }}\`
        *Commit:* \`${{ github.sha }}\`
        *Author:* ${{ github.actor }}

        *Changes:*
        ${{ github.event.head_commit.message }}

        *Status:* ‚úÖ Deployed to production

        *Deployment Details:*
        ‚Ä¢ Application files uploaded to FTP server
        ‚Ä¢ Vendor folder excluded for faster upload
        ‚Ä¢ AWS/Docker dependencies removed

        *Next Steps:*
        ‚Ä¢ Run \`composer install --no-dev\` on server
        ‚Ä¢ Clear and cache Laravel configurations
        ‚Ä¢ Set proper file permissions

        üîó [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" \
          -d "parse_mode=Markdown" \
          -d "disable_web_page_preview=true"
          
    - name: Cleanup
      if: always()
      run: |
        rm -rf deployment/