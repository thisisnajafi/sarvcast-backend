version: '3.8'

services:
  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: sarvcast_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./storage/app/public:/var/www/storage/app/public:ro
      - ./public:/var/www/public:ro
    depends_on:
      - php-fpm
    restart: unless-stopped
    networks:
      - sarvcast_network

  # PHP-FPM Application Server
  php-fpm:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: sarvcast_php
    volumes:
      - .:/var/www
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=sarvcast_production
      - DB_USERNAME=sarvcast_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    networks:
      - sarvcast_network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: sarvcast_mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=sarvcast_production
      - MYSQL_USER=sarvcast_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"
    restart: unless-stopped
    networks:
      - sarvcast_network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: sarvcast_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - sarvcast_network

  # Supervisor for Queue Workers
  supervisor:
    build:
      context: .
      dockerfile: Dockerfile.supervisor
    container_name: sarvcast_supervisor
    volumes:
      - .:/var/www
      - ./supervisor/supervisord.conf:/etc/supervisor/supervisord.conf:ro
    depends_on:
      - php-fpm
      - redis
    restart: unless-stopped
    networks:
      - sarvcast_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sarvcast_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sarvcast_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sarvcast_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sarvcast_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sarvcast_network:
    driver: bridge