version: '3.8'

services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: sarvcast_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=sarvcast_production
      - DB_USERNAME=sarvcast_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - mysql
      - redis
    networks:
      - sarvcast_network

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: sarvcast_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/html/public
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites-available:/etc/nginx/sites-available
      - ./docker/ssl:/etc/nginx/ssl
      - ./storage/app/public:/var/www/html/storage/app/public
    depends_on:
      - app
    networks:
      - sarvcast_network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: sarvcast_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: sarvcast_production
      MYSQL_USER: sarvcast_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    ports:
      - "3306:3306"
    networks:
      - sarvcast_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sarvcast_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sarvcast_network

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: sarvcast_queue
    restart: unless-stopped
    working_dir: /var/www/html
    command: php artisan queue:work redis --sleep=3 --tries=3 --max-time=3600
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=sarvcast_production
      - DB_USERNAME=sarvcast_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - mysql
      - redis
    networks:
      - sarvcast_network

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: sarvcast_scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    command: php artisan schedule:work
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=sarvcast_production
      - DB_USERNAME=sarvcast_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - mysql
      - redis
    networks:
      - sarvcast_network

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: sarvcast_backup
    restart: unless-stopped
    working_dir: /var/www/html
    command: php artisan sarvcast:backup --type=full
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - backup_data:/var/backups/sarvcast
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=sarvcast_production
      - DB_USERNAME=sarvcast_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - mysql
      - redis
    networks:
      - sarvcast_network

  # Monitoring (Optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: sarvcast_monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sarvcast_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backup_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  sarvcast_network:
    driver: bridge
